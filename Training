import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import VGG16
from tensorflow.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.models import Model

# Đường dẫn tới thư mục chứa dữ liệu huấn luyện và kiểm tra
train_data_dir = "C:/data"
test_data_dir = "C:/datatest"

# Kích thước ảnh đầu vào
IMAGE_HEIGHT, IMAGE_WIDTH = 224, 224

# Số lớp đối tượng (số lượng chữ cái)
NUM_CLASSES = len(os.listdir(train_data_dir))

# Tạo generators cho dữ liệu huấn luyện và kiểm tra
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(IMAGE_HEIGHT, IMAGE_WIDTH),
    batch_size=32,
    class_mode='categorical')

test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(IMAGE_HEIGHT, IMAGE_WIDTH),
    batch_size=32,
    class_mode='categorical')

# Load mô hình VGG16
base_model = VGG16(weights='imagenet', include_top=False, input_shape=(IMAGE_HEIGHT, IMAGE_WIDTH, 3))

# Freeze các layer của mô hình VGG16
for layer in base_model.layers:
    layer.trainable = False

# Thêm các lớp fully connected và dropout
x = Flatten()(base_model.output)
x = Dense(128, activation='relu')(x)
x = Dropout(0.5)(x)
output = Dense(NUM_CLASSES, activation='softmax')(x)

# Xây dựng mô hình
model = Model(inputs=base_model.input, outputs=output)

# Compile mô hình
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Huấn luyện mô hình
model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    epochs=10,
    validation_data=test_generator,
    validation_steps=test_generator.samples // test_generator.batch_size
)

# Lưu mô hình
model.save('sign_language_vgg16_model.keras')
