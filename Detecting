import cv2
import numpy as np
import tkinter as tk
from tkinter import Button, Label
from PIL import Image, ImageTk
from keras.models import load_model

class WebcamApp:
    def __init__(self, window, window_title):
        self.window = window
        self.window.title(window_title)
        self.window.configure(background='#7AB2B2')

        # Kích thước khung cửa sổ hình chữ nhật trung bình
        self.window.geometry("600x400")
        
        # Tạo frame chứa các thành phần
        self.main_frame = tk.Frame(window, bg='#7AB2B2')
        self.main_frame.pack(expand=True)

        # Tiêu đề
        self.header_label = Label(self.main_frame, text="Let's Say...", font=("Jaro", 70), bg='#7AB2B2', fg="white")
        self.header_label.pack(pady=20)

        # Nút Start
        self.start_button = Button(self.main_frame, text="Start", width=20, command=self.start_recognition, bg="#41B06E", fg="white", font=("Helvetica", 14))
        self.start_button.pack(pady=10)

        # Nút Stop
        self.stop_button = Button(self.main_frame, text="Stop", width=20, command=self.stop_recognition, bg="#FFAA80", fg="white", font=("Helvetica", 14))
        self.stop_button.pack(pady=10)
        self.stop_button.config(state="disabled")

        self.label = Label(self.main_frame)
        self.label.pack(pady=20)

        self.load_model()

        self.delay = 10
        self.webcam = None
        self.recognizing = False

    def load_model(self):
        self.model = load_model('sign_language_vgg16_model.keras')

    def start_recognition(self):
        if not self.recognizing:
            self.webcam = cv2.VideoCapture(0)
            self.start_button.config(state="disabled")
            self.stop_button.config(state="normal")
            self.recognizing = True
            self.update()

    def stop_recognition(self):
        if self.recognizing:
            self.webcam.release()
            self.webcam = None
            self.current_frame = None
            self.recognizing = False
            self.predicted_character = None
            self.label.config(image=None)
            self.start_button.config(state="normal")
            self.stop_button.config(state="disabled")

    def update(self):
        if self.recognizing:
            ret, frame = self.webcam.read()
            if ret:
                # Lật hình ảnh (mirror)
                frame = cv2.flip(frame, 1)
                self.current_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                self.predict_character()
                self.display_frame()

                self.window.after(self.delay, self.update)

    def predict_character(self):
        # Xử lý frame để đảm bảo kích thước và định dạng phù hợp với mô hình
        frame = cv2.resize(self.current_frame[100:324, 100:324], (224, 224))
        frame = np.expand_dims(frame, axis=0)
        frame = frame / 255.0

        # Dự đoán ký tự
        prediction = self.model.predict(frame)
        self.predicted_character = np.argmax(prediction)

    def display_frame(self):
        if self.current_frame is not None:
            # Vẽ hình vuông nhận diện
            cv2.rectangle(self.current_frame, (100, 100), (324, 324), (0, 255, 0), 2)

            # Hiển thị ký tự được nhận diện
            if self.predicted_character is not None:
                character = chr(ord('A') + self.predicted_character)
                cv2.putText(self.current_frame, f"Predicted: {character}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
                
            img = Image.fromarray(self.current_frame)
            img = ImageTk.PhotoImage(image=img)
            self.label.img = img
            self.label.config(image=img)

if __name__ == '__main__':
    root = tk.Tk()
    app = WebcamApp(root, "Let's Say")
    root.mainloop()
